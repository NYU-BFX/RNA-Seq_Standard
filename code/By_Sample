#!/bin/bash

source code/custom-bashrc

CWD=`pwd`

if [ -z $NSLOTS ]
then
        NSLOTS=6
fi
params=$1
SAMPLE=$2


if [ `cat $CWD/${SAMPLE}.out | wc -l` -eq 1 ]; then exec >> $CWD/$SAMPLE.out;else exec > $CWD/$SAMPLE.out; fi
exec 2>&1

FLAG=0
if [ ! -z `qstat -j $JOB_ID | grep "tmp_free" | sed 's/ +//g' | cut -d ' ' -f1` ]
then
	for CONTENT in `ls -d * | grep -v pipeline`
	do
		ln -s $CWD/$CONTENT $TMP/$CONTENT
	done
	mkdir $TMP/pipeline
	
	for LINKS in `find pipeline/ -maxdepth 2 -type l -print`
	do
		rsync -rl $LINKS $TMP/`dirname $LINKS`/
	done
	for CONTENT in `ls -d pipeline/*/$SAMPLE`
	do
		rsync -rl `dirname $CONTENT`/$SAMPLE $TMP/`dirname $CONTENT`
	done
	cd $TMP
	FLAG=1
else 
	TMP=$CWD
fi



echo "#########################"
echo "###### Starting: $SAMPLE on $HOSTNAME in $TMP"
date
echo

echo "###### Downloading: $SAMPLE"
run_fastq-download $params pipeline/download meta_data $SAMPLE
if [ $FLAG -eq 1 ]; then rsync -rl pipeline/download/ $CWD/pipeline/download/; fi
status=$?
if [ $status -ne 0 ]; then exit 1; fi

echo "###### Linking: $SAMPLE"
run_fastq-link $params pipeline/fastq pipeline/download $SAMPLE
status=$?
if [ $FLAG -eq 1 ]; then rsync -rl pipeline/fastq/ $CWD/pipeline/fastq/; fi
if [ $status -ne 0 ]; then exit 1; fi
echo "###### Alignning: $SAMPLE"
run_alignment $params pipeline/alignment pipeline/fastq $SAMPLE
status=$?
if [ $FLAG -eq 1 ]; then rsync -rl pipeline/alignment/ $CWD/pipeline/alignment/; fi
if [ $status -ne 0 ]; then exit 1; fi

echo "###### Assemblying: $SAMPLE"
run_assembly $params pipeline/cufflinks pipeline/alignment $SAMPLE
status=$?
if [ $FLAG -eq 1 ]; then rsync -rl pipeline/cufflinks/ $CWD/pipeline/cufflinks/; fi
if [ $status -ne 0 ]; then exit 1; fi

echo

echo "###### Completed: $SAMPLE"
date
echo "###### Done ######"

