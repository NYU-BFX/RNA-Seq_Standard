#!/bin/bash

source code/custom-bashrc


if [ "$#" -ne 2 ] && [ "$#" -ne 3 ] && [ "$#" -ne 4 ]
then
  printf "\n###### Usage\n"
  printf "$0 [Optional: Threads (Default 6)] <PARAMS> <OUTPUT_DIR> [Optional: Sample Name] \n"
  exit
fi

date




#########################
# input

if [[ $1 =~ ^[[:digit:]]{1,2}$ ]];then NSLOTS=$1;shift
elif [[ $NSLOTS == "" ]]; then NSLOTS=6; fi

PARAMS=$1
OUT_DIR=`readlink -f $2`
SAMPLE=$3

CWD=`pwd`

#########################
if [ ! -d $OUT_DIR ]; then mkdir -p $OUT_DIR; fi

IFS=$'\n'

#header=`cat $PARAMS | grep -E "^#" | head -1 | cut -d' ' -f2`


########################
# SRA Download
for record in `cat $PARAMS | grep -v "^#"`
do
  name_sample=`echo $record | cut -f1`
  id_sample=`echo $record | cut -f2`
  header=`echo $record | cut -f3`
  if [ "$name_sample" == "$SAMPLE" ] || [ -z "$SAMPLE" ]
  then
  # check for output existance
    fastq_dump_path=`which fastq-dump.2.4.2`
    picard_path=`which picard.jar`
    gdc_client_path=`which gdc-client`
    EgaDemoClient_path=`which EgaDemoClient.jar`
    sleep $(( ( RANDOM % 5 )  + 1 )) 
    if [ ! -d $OUT_DIR/$name_sample ]
    then
      mkdir $OUT_DIR/$name_sample
      ### change of directory
      cd $OUT_DIR/$name_sample/
      echo "#!/bin/bash" > run.bash
      echo "cd $OUT_DIR/$name_sample/ # change of directory" >> run.bash
    else
      echo "Output $OUT_DIR/$name_sample Existing!"
      ### change of directory
      cd $OUT_DIR/$name_sample/
    fi
    
    if [ "$header" == "SRA" ]; then
      echo
      echo "###### Downloading $name_sample from $header!"
    
      link_sample="https://www.ncbi.nlm.nih.gov/sra/$id_sample/"
      ID_RUNS=(`wget -q -O - $link_sample | sed -E 's/run\=SRR/\n/g' | grep SRR | sed -E 's/\">|<\/a>/\t/g' | cut -f2`)
      orig_num_run=0
      mkdir data  # creating data directory...
      echo "mkdir data  # creating data directory" >> run.bash
      for id_run in "${ID_RUNS[@]}"
      do
        echo "  |____ $id_run"
        ((orig_num_run++))
        num_run=`printf "%0*d" 3 $orig_num_run`
        link_run="ftp://ftp-trace.ncbi.nlm.nih.gov/sra/sra-instant/reads/ByRun/sra/SRR/${id_run:0:6}/${id_run}/"
        ID_FILES=(`curl --retry 10 --retry-delay 10 -sS $link_run | sed -r 's/\s+/\t/g' | cut -f9 `)
        for name_file in "${ID_FILES[@]}"
        do
          id_file=${name_file%.*}
          echo "  |  |____ $id_file"
          echo "  |  |         Retrieving SRA... "
          link_file=${link_run}${name_file}
          wget --tries inf -q $link_file # downloading .sra file
          echo "wget --tries inf -q $link_file # download .sra file" >> run.bash
          echo "  |  |         Converting SRA..."
          $fastq_dump_path --split-files -gzip $name_file 1>&- # convert SRA file to fastq.gz file and seperate read1 and read2
          echo "$fastq_dump_path --split-files -gzip $name_file 1>&- # convert SRA file to fastq.gz file and seperate read1 and read2" >> run.bash
          rm -rf $name_file  # cleaning up .sra file...
          echo "rm -rf $name_file  # cleaning up .sra file..." >> run.bash
          mv ${id_file}_1.fastq.gz data/; ln -s data/${id_file}_1.fastq.gz ${name_sample}_L${num_run}_R1.fastq.gz # linking read1...
          echo "mv ${id_file}_1.fastq.gz data/; ln -s data/${id_file}_1.fastq.gz ${name_sample}_L${num_run}_R1.fastq.gz # linking read1..." >> run.bash
          echo "  |  |         Linking data/${id_file}_1.fastq.gz to ${name_sample}_L${num_run}_R1.fastq.gz"
          if [[ -f ${id_file}_2.fastq.gz ]] 
          then 
            mv ${id_file}_2.fastq.gz data/; ln -s data/${id_file}_2.fastq.gz ${name_sample}_L${num_run}_R2.fastq.gz # linking read2...
            echo "mv ${id_file}_2.fastq.gz data/; ln -s data/${id_file}_2.fastq.gz ${name_sample}_L${num_run}_R2.fastq.gz # linking read2..." >> run.bash
            echo "  |  |         Linking data/${id_file}_2.fastq.gz to ${name_sample}_L${num_run}_R2.fastq.gz"
          fi
        done
      done
    elif [[ $header == *gdc-user-token* ]]
    then
      echo
      echo "###### Downloading $name_sample from TCGA!"
      echo $id_sample
      echo "  |____ Downloading .bam file..."
      cd ../;$gdc_client_path download --no-annotations -n $NSLOTS -t $header $id_sample;cd -;mkdir data # Downloading bam file and creating data directory...
      echo "cd ../;$gdc_client_path download --no-annotations -n $NSLOTS-t $header $id_sample;cd -;mkdir data # Downloading bam file and creatingi data directory... " >> run.bash
      echo "  |____ Converting to .fastq file..."
      java -jar $picard_path SamToFastq I=`ls *.bam` FASTQ=data/${id_sample}_L001_R1.fastq SECOND_END_FASTQ=data/${id_sample}_L001_R2.fastq QUIET=true VERBOSITY=ERROR INCLUDE_NON_PF_READS=true # Converting to fastq file...
      echo "java -jar $picard_path SamToFastq I=\`ls *.bam\` FASTQ=data/${id_sample}_L001_R1.fastq SECOND_END_FASTQ=data/${id_sample}_L001_R2.fastq QUIET=true VERBOSITY=ERROR INCLUDE_NON_PF_READS=true # Converting to fastq file..." >> run.bash 
      rm -rf *.ba{m,i}  # Cleaning up .bam and .bai file
      echo "rm -rf *.ba{m,i} # cleaning up .bam and .bai file" >> run.bash
      echo "  |____ Gzipping to .gz file..."
      gzip data/${id_sample}_L001_R1.fastq data/${id_sample}_L001_R2.fastq # Gzipping to .gz file...
      echo "gzip data/${id_sample}_L001_R1.fastq data/${id_sample}_L001_R2.fastq # Gzipping to .gz file..." >> run.bash
      ln -s data/${id_sample}_L001_R1.fastq.gz ${name_sample}_L001_R1.fastq.gz # Linking read1...
      echo "ln -s data/${id_sample}_L001_R1.fastq.gz ${name_sample}_L001_R1.fastq.gz # Linking read1..." >> run.bash
      if [ ! -s data/${id_sample}_L001_R2.fastq.gz ]
      then
        rm -rf data/${id_sample}_L001_R2.fastq.gz # Deleting empty read2 file...
        echo "rm -rf data/${id_sample}_L001_R2.fastq.gz # Deleting empty read2 file..." >> run.bash
      else
        ln -s data/${id_sample}_L001_R2.fastq.gz ${name_sample}_L001_R2.fastq.gz # Linking read2...
        echo "ln -s data/${id_sample}_L001_R2.fastq.gz ${name_sample}_L001_R2.fastq.gz # Linking read2..." >> run.bash
      fi
    elif [[ $header =~ ^-p[[:space:]].* ]]
    then
      CMD="sleep $(( ( RANDOM % 10 )  + 1 )); 
           java -jar $EgaDemoClient_path $header -nvb -rf $id_sample -re key_$id_sample -label request_$id_sample; 
           java -jar $EgaDemoClient_path $header -nvb -dr request_$id_sample -path $id_sample -nt $NSLOTS; 
           sleep 10; 
           java -jar $EgaDemoClient_path $header -nvb -dc $id_sample/_*.cip -dck key_$id_sample -path ./; 
           ln -s $id_sample/*.fastq.gz ${name_sample}_L001_R\`ls $id_sample/*.fastq.gz | sed 's/pair/\t/g'  | cut -f2\`;
           "
      eval $CMD
      echo $CMD >> run.bash
    elif [ -d $header ]
    then
      echo
      echo "###### Linking $name_sample from Local Directory!"
      echo $header
      ln -s $header data # linking source directory...
      echo "ln -s $header data # linking source directory..." >> run.bash
      for myfastq in `ls -1 $header | grep "^$id_sample"`
      do
        echo "  |____ data/`basename $myfastq` to ${name_sample}`echo $myfastq | sed 's/'$id_sample'/\t/g' | cut -f2`"
        ln -sf data/`basename $myfastq` ${name_sample}`echo $myfastq | sed 's/'$id_sample'/\t/g' | cut -f2` # linking file...
        echo "ln -sf data/\`basename $myfastq\` ${name_sample}\`echo $myfastq | sed 's/'$id_sample'/\t/g' | cut -f2\` # linking file..." >> run.bash
      done
    else
      LINK_FILES=(`echo $header | tr ',' '\n'`)
      ID_FILES=(`echo $id_sample | tr ',' '\n'`)
      echo
      echo "###### Downloading $name_sample from Provided Links!"
      orig_num_run=0
      mkdir data  # creating data directory...
      echo "mkdir data  # creating data directory" >> run.bash
      for link_file in "${LINK_FILES[@]}"
      do
        echo "  |_______ Downloading $link_file"
        wget -q $link_file # downloading file
        echo "wget -q $link_file # download file" >> run.bash
        base_name=`basename $link_file`
        mv $base_name data/; ln -s data/$base_name ${name_sample}_${ID_FILES[$orig_num_run]}.fastq.gz # linking read...
        echo "mv $base_name data/; ln -s data/$base_name ${name_sample}_${ID_FILES[$orig_num_run]}.fastq.gz # linking read..." >> run.bash
        echo "  |        Linking data/$base_name to ${name_sample}_${ID_FILES[$orig_num_run]}.fastq.gz"
        ((orig_num_run++))
      done
    fi
    echo "cd $CWD # changing back to working directory..." >> run.bash
  fi
  cd $CWD
done


#########################
echo
date
# end
